{"version":3,"sources":["axios.js","requests.js","Row.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOrignals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentriesMovies","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","then","url","console","log","URL","search","urlParams","URLSearchParams","catch","error","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","orignal_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fa0fae8c.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\"\n});\n\n//instance.get('/foo-bar') -----> https://api.themoviedb.org/3/foo-bar\n\nexport default instance;","const API_KEY = \"f9a5db1300a04eb1370827c5df589921\"\n\nconst requests = {\n\n    fetchTrending : `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOrignals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated : `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies : `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies : `/discover/movie?api_key=${API_KEY}&with_genres=35` ,\n    fetchHorrorMovies :`/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies : `/discover/movie?api_key=${API_KEY}&with_genres=10749` ,\n    fetchDocumentriesMovies :`/discover/movie?api_key=${API_KEY}&with_genres=99`,\n}\n\n\nexport default requests;","import React, { useState , useEffect }from 'react';\nimport axios from \"./axios\";\nimport requests from './requests';\nimport './Row.css'\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nconst base_url = \"https://image.tmdb.org/t/p/w500\";\n\nfunction Row({title,fetchUrl, isLargeRow}){\n\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl , setTrailerUrl] = useState(\"\");\n    // console.log(fetchUrl);\n    useEffect( () => {\n    // if [] , run once when the row loads and dont run again\n    async function fetchData() {\n    const request = await axios.get(fetchUrl);\n    setMovies(request.data.results);\n    return request;\n    };\n    fetchData();\n    }, [fetchUrl] );\n    \n    const opts = {\n        height : \"390\",\n        width : \"100%\",\n        playerVars : { \n            autoplay:1 \n        }\n\n\n    }\n\n    const handleClick = (movie) =>{\n        if (trailerUrl){\n            setTrailerUrl('');\n        }else{\n            movieTrailer(movie?.name || \"\")\n            .then((url) =>{\n                console.log(new URL(url).search);\n                const urlParams =new URLSearchParams(new URL(url).search);\n                console.log(urlParams);\n                setTrailerUrl(urlParams.get('v'));\n            } ).catch((error) => console.log(error))\n        }\n    }\n    // console.log(movies);\n    return (\n        <div className=\"row\">\n         <h2>{title}</h2>\n         <div className = \"row__posters\">\n            { movies.map(movie => (\n                <img\n                key = {movie.id}\n                onClick = {()=> handleClick(movie)}\n                className = {`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                src={`${base_url}${isLargeRow ? movie.poster_path: movie.backdrop_path}`} alt = {movie.name}/>\n            ))}\n         </div>\n         {trailerUrl && <YouTube videoId = {trailerUrl} opts = {opts}/>}\n        </div>\n    )\n\n\n\n}\n\nexport default Row;","import React , {useState, useEffect} from 'react'\nimport axios from './axios';\nimport requests from './requests';\nimport './Banner.css';\n\nfunction Banner() {\n    const [movie , setMovie] = useState([]);\n    useEffect( () => {\n\n        async function fetchData(){\n            const request = await axios.get(requests.fetchNetflixOrignals);\n            setMovie(request.data.results[\n                Math.floor(Math.random()* request.data.results.length)\n            ]);\n            return request;\n        }\n        fetchData();\n    },[]);\n    console.log(movie.backdrop_path); \n    function truncate(str , n) {\n        return str?.length > n ? str.substr(0, n-1) + \"...\" : str;\n    }\n\n    return (\n        <header className = \"banner\"\n        \n        style = {{\n            backgroundSize: \"cover\",\n            backgroundImage: `url(\"https://image.tmdb.org/t/p/w500${movie?.backdrop_path}\")`,\n            backgroundPosition: \" center center\"\n    \n        }}>\n      \n        <div className = \"banner__contents\">\n        <h1 className = \"banner__title\">\n            {movie?.title || movie?.name || movie?.orignal_name}\n        </h1>\n        <div className=\"banner__buttons\">\n            <button className=\"banner__button\">Play</button>\n            <button className=\"banner__button\">My List</button>\n        </div>\n        <h1 className=\"banner__description\">\n            {truncate(movie?.overview, 150)}\n        </h1>\n        </div>\n        <div className=\"banner--fadeBottom\"></div>\n        </header>\n\n    )\n}\n\nexport default Banner;\n","import React, {useState ,useEffect } from 'react';\nimport './Nav.css';\n\nfunction Nav() {\n    const [show, handleShow] = useState(false);\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", () =>{\n\n            if(window.scrollY> 100){\n                handleShow(true)\n            }else handleShow(false);\n        });\n        return ()=>{\n            window.removeEventListener(\"scroll\");\n        }\n       \n    }, []);\n    return (\n        <div className={`nav ${show && \"nav__black\"}`} >\n        <img src=\"https://pmcvariety.files.wordpress.com/2020/05/netflix-logo.png?w=600\" \n            alt=\"Netflix logo\"\n            className=\"nav__logo\"/>\n        <img src=\"https://i.pinimg.com/564x/b6/77/cd/b677cd1cde292f261166533d6fe75872.jpg\" alt=\"\" className=\"nav__avatar\"/>\n            \n        </div>\n    )\n}\n\nexport default Nav\n ","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n\n  return (\n  <div className=\"app\">\n  <Nav/>\n  <Banner />\n  <Row title = \"NETFLIX ORIGNALS\" \n  fetchUrl = {requests.fetchNetflixOrignals} isLargeRow = {true}/>\n  <Row title = \"Trending Now\" fetchUrl = {requests.fetchTrending}/>\n  <Row title = \"Top Rated\" fetchUrl = {requests.fetchTopRated}/> \n  <Row title = \"Action Movies\" fetchUrl = {requests.fetchActionMovies}/> \n  <Row title = \"Comedy Movies\" fetchUrl = {requests.fetchComedyMovies}/> \n  <Row title = \"Horror Movies\" fetchUrl = {requests.fetchHorrorMovies}/> \n  <Row title = \"Romance Movies\" fetchUrl = {requests.fetchRomanceMovies}/> \n  <Row title = \"Documentaries\" fetchUrl = {requests.fetchDocumentriesMovies}/>  \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}