{"ast":null,"code":"import _regeneratorRuntime from\"/home/hap-180/Documents/my_webapp/netflix_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/hap-180/Documents/my_webapp/netflix_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/hap-180/Documents/my_webapp/netflix_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import axios from\"./axios\";import requests from'./requests';import'./Row.css';import YouTube from'react-youtube';import movieTrailer from'movie-trailer';var base_url=\"https://image.tmdb.org/t/p/w500\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];// console.log(fetchUrl);\nuseEffect(function(){// if [] , run once when the row loads and dont run again\nfunction fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;setMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);};fetchData();},[fetchUrl]);var opts={height:\"390\",width:\"100%\",playerVars:{autoplay:1}};var handleClick=function handleClick(movie){if(trailerUrl){setTrailerUrl('');}else{movieTrailer((movie===null||movie===void 0?void 0:movie.name)||\"\").then(function(url){console.log(new URL(url).search);var urlParams=new URLSearchParams(new URL(url).search);console.log(urlParams);setTrailerUrl(urlParams.get('v'));}).catch(function(error){return console.log(error);});}};// console.log(movies);\nreturn/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"h2\",null,title),/*#__PURE__*/React.createElement(\"div\",{className:\"row__posters\"},movies.map(function(movie){return/*#__PURE__*/React.createElement(\"img\",{key:movie.id,onClick:function onClick(){return handleClick(movie);},className:\"row__poster \".concat(isLargeRow&&\"row__posterLarge\"),src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name});})),trailerUrl&&/*#__PURE__*/React.createElement(YouTube,{videoId:trailerUrl,opts:opts}));}export default Row;","map":{"version":3,"sources":["/home/hap-180/Documents/my_webapp/netflix_clone/src/Row.js"],"names":["React","useState","useEffect","axios","requests","YouTube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","get","request","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","console","log","URL","search","urlParams","URLSearchParams","catch","error","map","id","poster_path","backdrop_path"],"mappings":"+eAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA2BC,SAA3B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,eAAzB,CACA,GAAMC,CAAAA,QAAQ,CAAG,iCAAjB,CAEA,QAASC,CAAAA,GAAT,MAA0C,IAA5BC,CAAAA,KAA4B,MAA5BA,KAA4B,CAAtBC,QAAsB,MAAtBA,QAAsB,CAAZC,UAAY,MAAZA,UAAY,eAEVV,QAAQ,CAAC,EAAD,CAFE,wCAE/BW,MAF+B,eAEvBC,SAFuB,8BAGDZ,QAAQ,CAAC,EAAD,CAHP,yCAG/Ba,UAH+B,eAGlBC,aAHkB,eAItC;AACAb,SAAS,CAAE,UAAM,CACjB;AADiB,QAEFc,CAAAA,SAFE,qIAEjB,qKACsBb,CAAAA,KAAK,CAACc,GAAN,CAAUP,QAAV,CADtB,QACMQ,OADN,eAEAL,SAAS,CAACK,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAFA,gCAGOF,OAHP,wDAFiB,4CAMhB,CACDF,SAAS,GACR,CARQ,CAQN,CAACN,QAAD,CARM,CAAT,CAUA,GAAMW,CAAAA,IAAI,CAAG,CACTC,MAAM,CAAG,KADA,CAETC,KAAK,CAAG,MAFC,CAGTC,UAAU,CAAG,CACTC,QAAQ,CAAC,CADA,CAHJ,CAAb,CAUA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAU,CAC1B,GAAIb,UAAJ,CAAe,CACXC,aAAa,CAAC,EAAD,CAAb,CACH,CAFD,IAEK,CACDT,YAAY,CAAC,CAAAqB,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAEC,IAAP,GAAe,EAAhB,CAAZ,CACCC,IADD,CACM,SAACC,GAAD,CAAQ,CACVC,OAAO,CAACC,GAAR,CAAY,GAAIC,CAAAA,GAAJ,CAAQH,GAAR,EAAaI,MAAzB,EACA,GAAMC,CAAAA,SAAS,CAAE,GAAIC,CAAAA,eAAJ,CAAoB,GAAIH,CAAAA,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAjB,CACAH,OAAO,CAACC,GAAR,CAAYG,SAAZ,EACApB,aAAa,CAACoB,SAAS,CAAClB,GAAV,CAAc,GAAd,CAAD,CAAb,CACH,CAND,EAMIoB,KANJ,CAMU,SAACC,KAAD,QAAWP,CAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ,CAAX,EANV,EAOH,CACJ,CAZD,CAaA;AACA,mBACI,2BAAK,SAAS,CAAC,KAAf,eACC,8BAAK7B,KAAL,CADD,cAEC,2BAAK,SAAS,CAAG,cAAjB,EACKG,MAAM,CAAC2B,GAAP,CAAW,SAAAZ,KAAK,qBACd,2BACA,GAAG,CAAIA,KAAK,CAACa,EADb,CAEA,OAAO,CAAI,yBAAKd,CAAAA,WAAW,CAACC,KAAD,CAAhB,EAFX,CAGA,SAAS,uBAAmBhB,UAAU,EAAI,kBAAjC,CAHT,CAIA,GAAG,WAAKJ,QAAL,SAAgBI,UAAU,CAAGgB,KAAK,CAACc,WAAT,CAAsBd,KAAK,CAACe,aAAtD,CAJH,CAI0E,GAAG,CAAIf,KAAK,CAACC,IAJvF,EADc,EAAhB,CADL,CAFD,CAWEd,UAAU,eAAI,oBAAC,OAAD,EAAS,OAAO,CAAIA,UAApB,CAAgC,IAAI,CAAIO,IAAxC,EAXhB,CADJ,CAkBH,CAED,cAAeb,CAAAA,GAAf","sourcesContent":["import React, { useState , useEffect }from 'react';\nimport axios from \"./axios\";\nimport requests from './requests';\nimport './Row.css'\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nconst base_url = \"https://image.tmdb.org/t/p/w500\";\n\nfunction Row({title,fetchUrl, isLargeRow}){\n\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl , setTrailerUrl] = useState(\"\");\n    // console.log(fetchUrl);\n    useEffect( () => {\n    // if [] , run once when the row loads and dont run again\n    async function fetchData() {\n    const request = await axios.get(fetchUrl);\n    setMovies(request.data.results);\n    return request;\n    };\n    fetchData();\n    }, [fetchUrl] );\n    \n    const opts = {\n        height : \"390\",\n        width : \"100%\",\n        playerVars : { \n            autoplay:1 \n        }\n\n\n    }\n\n    const handleClick = (movie) =>{\n        if (trailerUrl){\n            setTrailerUrl('');\n        }else{\n            movieTrailer(movie?.name || \"\")\n            .then((url) =>{\n                console.log(new URL(url).search);\n                const urlParams =new URLSearchParams(new URL(url).search);\n                console.log(urlParams);\n                setTrailerUrl(urlParams.get('v'));\n            } ).catch((error) => console.log(error))\n        }\n    }\n    // console.log(movies);\n    return (\n        <div className=\"row\">\n         <h2>{title}</h2>\n         <div className = \"row__posters\">\n            { movies.map(movie => (\n                <img\n                key = {movie.id}\n                onClick = {()=> handleClick(movie)}\n                className = {`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                src={`${base_url}${isLargeRow ? movie.poster_path: movie.backdrop_path}`} alt = {movie.name}/>\n            ))}\n         </div>\n         {trailerUrl && <YouTube videoId = {trailerUrl} opts = {opts}/>}\n        </div>\n    )\n\n\n\n}\n\nexport default Row;"]},"metadata":{},"sourceType":"module"}