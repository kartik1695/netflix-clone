{"ast":null,"code":"var _jsxFileName = \"/home/hap-180/Documents/my_webapp/netflix-clone/src/Row.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from \"./axios\";\nimport requests from './requests';\nimport './Row.css';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nconst base_url = \"https://image.tmdb.org/t/p/w500\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\"); // console.log(fetchUrl);\n\n  useEffect(() => {\n    // if [] , run once when the row loads and dont run again\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    ;\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        console.log(new URL(url).search);\n        const urlParams = new URLSearchParams(new URL(url).search);\n        console.log(urlParams);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  }; // console.log(movies);\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 10\n    }\n  }, title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row__posters\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 10\n    }\n  }, movies.map(movie => /*#__PURE__*/React.createElement(\"img\", {\n    key: movie.id,\n    onClick: () => handleClick(movie),\n    className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n    src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n    alt: movie.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }))), trailerUrl && /*#__PURE__*/React.createElement(YouTube, {\n    videoId: trailerUrl,\n    opts: opts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 25\n    }\n  }));\n}\n\nexport default Row;","map":{"version":3,"sources":["/home/hap-180/Documents/my_webapp/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","axios","requests","YouTube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","console","log","URL","search","urlParams","URLSearchParams","catch","error","map","id","poster_path","backdrop_path"],"mappings":"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","sourcesContent":["import React, { useState , useEffect }from 'react';\nimport axios from \"./axios\";\nimport requests from './requests';\nimport './Row.css'\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nconst base_url = \"https://image.tmdb.org/t/p/w500\";\n\nfunction Row({title,fetchUrl, isLargeRow}){\n\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl , setTrailerUrl] = useState(\"\");\n    // console.log(fetchUrl);\n    useEffect( () => {\n    // if [] , run once when the row loads and dont run again\n    async function fetchData() {\n    const request = await axios.get(fetchUrl);\n    setMovies(request.data.results);\n    return request;\n    };\n    fetchData();\n    }, [fetchUrl] );\n    \n    const opts = {\n        height : \"390\",\n        width : \"100%\",\n        playerVars : { \n            autoplay:1 \n        }\n\n\n    }\n\n    const handleClick = (movie) =>{\n        if (trailerUrl){\n            setTrailerUrl('');\n        }else{\n            movieTrailer(movie?.name || \"\")\n            .then((url) =>{\n                console.log(new URL(url).search);\n                const urlParams =new URLSearchParams(new URL(url).search);\n                console.log(urlParams);\n                setTrailerUrl(urlParams.get('v'));\n            } ).catch((error) => console.log(error))\n        }\n    }\n    // console.log(movies);\n    return (\n        <div className=\"row\">\n         <h2>{title}</h2>\n         <div className = \"row__posters\">\n            { movies.map(movie => (\n                <img\n                key = {movie.id}\n                onClick = {()=> handleClick(movie)}\n                className = {`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                src={`${base_url}${isLargeRow ? movie.poster_path: movie.backdrop_path}`} alt = {movie.name}/>\n            ))}\n         </div>\n         {trailerUrl && <YouTube videoId = {trailerUrl} opts = {opts}/>}\n        </div>\n    )\n\n\n\n}\n\nexport default Row;"]},"metadata":{},"sourceType":"module"}